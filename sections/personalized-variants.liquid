{%- liquid
  assign price = product.variants.first.price
  assign compare_at_price = product.variants.first.compare_at_price
  assign product_details = product.metafields.product

  assign has_subscription = false
  if product.selling_plan_groups.size > 0
      assign has_subscription = true
  endif

  assign selling_plan_group = product.selling_plan_groups[0]
  assign discount_percentage = 0
  for selling_plan in selling_plan_group.selling_plans
      if selling_plan.price_adjustments[0].value > discount_percentage
          assign discount_percentage = selling_plan.price_adjustments[0].value
      endif
  endfor

  assign price_times_discount = price | times: discount_percentage | divided_by: 100.0
  assign discount_price = price | minus: price_times_discount
  unless has_subscription
      assign discount_price = price
  endunless
  
  assign shipping_unit_servings = product_details.shipping-unit__servings.value
  assign unit_type_content = product_details.shipping-unit__type-content
-%}

{{ 'personalized-variants.css' | asset_url | stylesheet_tag }}

<div class="product-form__anchor" id="product-form" data-scroll-product></div>
<div class="product-form product-form-powder page-width pgfly-product-form-class" data-has-sub="{%- if has_subscription -%}true{%- else -%}{%- endif -%}"  data-mode="{%- unless has_subscription -%}onetime{%- endunless -%}" data-subs-value=" " data-variants-quantity="0">
<div class="product-form__image">
  <img src="" alt="" loading="lazy" width="1100" data-variant-product-form-image>
</div>
<div class="product-form__section-wrapper">

  <h3 class="h2-headline product__taste-title">{{ section.settings.s2_title }}</h3>

  <div class="product-form__section-variants">
    
    <div class="product__variants-wrapper">
      <div class="product__variants" data-personalized-variants-items>
        <div class="product__variant-wrapper" data-variant-wrapper data-variant-wrapper-default>
          <div class="product__variant-item" data-variant-id="" data-selling-plan>

            <em class="product__variant-item--sold-out details">Ausverkauft</em>
            <img class="product__variant-item--image" src="" alt="" loading="lazy" data-quiz-variant-image />

            <h3 class="btn-large-details__text"><strong data-quiz-variant-title></strong></h3>
            <p class="btn-large-details__text-details btn-large-details__text-details-2" data-quiz-variant-flavor-desc></p>
            
            <button class="product__variant__plus" type="button"></button>

            <div class="qty-variant" data-qty>
              <button class="qty-variant__btn qty-variant__minus" type="button" data-qty-minus>
                {% render 'icon-quantity-minus' %}
              </button>
              <input class="qty-variant__input submenu" value="0" disabled data-qty-input="">
              <button class="qty-variant__btn qty-variant__plus" type="button" data-qty-plus data-ucd="0">
                {% render 'icon-quantity-plus' %}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
  </div>
  
  <div class="product-form__section-plan">

    
    <div class="product__details-before-selection">
      {% comment %}
      <p class="product__free-shipping p">
        {% render 'icon-discount' %}<strong>20 % Rabatt</strong> mit Code: <strong>Personalized</strong> f체r die ersten 500 Bestellungen!
      </p>
      {% endcomment %}
      <div class="product-form__shipping">
        <div class="product-form__shipping-item">
          {% render 'icon-delivery' %}
          <p class="p">Lieferbar in 2-3 Tagen.</p>
        </div>
      </div>

      <div class="product__price-wrapper" data-price-wrapper-selection>
        <div class="product__price-text">
          <div class="btn-large-details__text-details product__pro-dose-value">Pro Dose:<br><span data-filling-size-g></span></div>
        </div>
        <div class="product__price-content">
          <input type="hidden" id="product-form__product-details-meta"
              data-serving-size="{{ product_details.serving-size__size }}"
              data-comparisonunit="{{ product_details.comparison__unit }}"
              data-shipping-unit-servings="{{ product_details.shipping-unit__servings }}">

          <div class="text-right product__price">
              {% if discount_price != 0 and has_subscription %}
                  <del class="btn-large-details__text" data-price-before="" data-wg-notranslate="manual"></del>
                  <ins class="h2-headline color-turquoise" data-price-actual="{{ discount_price | money }}" data-discounted-price="" data-wg-notranslate="manual">
                  </ins>
              {% else %}
                  {%- if compare_at_price != blank -%}
                      <del class="btn-large-details__text" data-price-before="" data-wg-notranslate="manual"></del>
                  {%- endif -%}
                  <ins class="h2-headline color-turquoise" data-price-actual="" data-wg-notranslate="manual">
                  </ins>
              {% endif %}
          </div>
          <div class="btn-large-details__text-details product-form__shipping-tax-notes">inkl. MwSt., zzgl. {{ 'Versandkosten' | link_to: '/pages/versand-und-bezahlung' }}
            <div class="product-form__product-comparison-facts" data-fact="onetime">
            <span data-original-price-per-100g></span>/ 100 g</span>
            </div>
          </div>
        </div>
      </div>
      
      <div class="product__price-wrapper" data-price-wrapper-no-selection>
        <div class="product__price-text">
          {% render 'icon-thumbs-up' %}
          {% assign shipping_unit_servings = product_details.shipping-unit__servings.value %}
          {% assign product_variants_size = product.variants.size | plus: 0 %}
          <p data-shipping-unit-servings="{{ product_details.shipping-unit__servings }}">
            Gute Wahl! {% if shipping_unit_servings != blank %}Du hast 
            <span data-price-text-qty>{{ shipping_unit_servings | times: product_variants_size }}</span> ausgewogene {% if product_details.shipping-unit__type-content != blank %}{{ product_details.shipping-unit__type-content }}{% else %}Mahlzeiten{% endif %} f체r &euro;<span data-discounted-price-per-meal></span> pro {{ product_details.price-unit__type.value }} ausgew채hlt.{% endif %}
          </p>
        </div>
        <div class="product__price-content">
          <div class="text-right product__price">
            <ins class="h2-headline color-turquoise">{{ 0 | money }}</ins>
          </div>
          <div class="btn-large-details__text-details product-form__shipping-tax-notes">inkl. MwSt., zzgl. {{ 'Versandkosten' | link_to: '/pages/versand-und-bezahlung' }}
        </div>
        </div>
      </div>
      
      <div class="product-form__controls-group product-form__controls-group--submit">
        <button type="button" class="btn btn--primary powder-form__cart-submit" data-quiz-variants-add-to-cart>
          <span class="product-form__cart-submit__text" data-btn-text=""><strong>{{ section.settings.btn_text }}</strong></span>
          <span class="hidden product-form__cart-submit__loader" data-loader="">
            {% render 'icon-spinner' %}
          </span>
        </button>

        <button type="button" class="btn btn--text btn__back-quiz-results" data-back-quiz-results>Zur체ck</button>
      </div>
    </div>
    
  </div>
</div>
</div>

<script>
window.addEventListener('DOMContentLoaded', (event) => {
  $('.product__floating-buy-btn, .product__subscription-option').on('click', function() {
    $('html').animate({
      scrollTop: $(".product__subscription-area").offset().top
    }, 700);
  });

  function calculatePricePerMeal(products_meta = []) {
    // perfectProduct.ProcuctVariants.forEach(function(variant) {
    //   products_meta.push({
    //     "price": 0,
    //     "discount_price": 0,
    //     "shipping_unit_servings": perfectProduct.ProductMetafields.shipping_unit_servings,
    //     "serving_size_size": 0,
    //     "quantity": 0
    //   })
    // });
    
    let totalMeals = 0;
    if ($('[data-price-text-qty]').length > 0) {
      totalMeals = parseInt($('[data-price-text-qty]').eq(1).text(), 10);
    }

    let totalQuantity = 0;
    $('[data-qty-input]').each((index, item) => {
      const value = parseInt($(item).val(), 10);
      totalQuantity += value;
    });

    let totalPrice = 0;
    let totalDiscountedPrice = 0;
    let totalWeight = 0;
    if (products_meta.length > 0) {
        products_meta.forEach(item => {
          const sizeNum = item.serving_size_size === '' ? 0 : parseInt(item.serving_size_size, 10);
        const servingsNum = item.shipping_unit_servings === '' ? 0 : parseInt(item.shipping_unit_servings, 10);
        const quantityNum = parseInt(item.quantity, 10);
        const priceNum = parseInt(item.price, 10);
        const discountedPriceNum = parseInt(item.discount_price, 10);
        
        totalWeight += (sizeNum * servingsNum) * quantityNum;
        totalPrice += priceNum * quantityNum;
        totalDiscountedPrice += discountedPriceNum * quantityNum;
      });
    }
    totalPrice = totalPrice / 100;
    totalDiscountedPrice = totalDiscountedPrice / 100;
    
    function toFixed(num, fixed) {
      var re = new RegExp('^-?\\d+(?:\.\\d{0,' + (fixed || -1) + '})?');
      return num.toString().match(re)[0];
    }

    const discountedPricePer100 = totalDiscountedPrice === 0 || totalWeight === 0 ? 0 : parseFloat((totalDiscountedPrice / totalWeight) * 100);

    const discountedPricePer100Formatted = toFixed(discountedPricePer100, 2).replace(".", ",");
    
    const pricePer100 = totalPrice === 0 || totalWeight === 0 ? 0 : parseFloat((totalPrice / totalWeight) * 100);
    const pricePer100Formatted = toFixed(pricePer100, 2).replace(".", ",");

    const discountedPricePerUnit = totalDiscountedPrice === 0 || totalMeals === 0 ? 0 : parseFloat(totalDiscountedPrice / totalMeals);
    const discountedPricePerUnitFormatted = toFixed(discountedPricePerUnit, 2).replace(".", ",");
    const pricePerUnit = totalPrice === 0 || totalMeals === 0 ? 0 : parseFloat(totalPrice / totalMeals);
    const pricePerUnitFormatted = toFixed(pricePerUnit, 2).replace(".", ",");

    if ($('[data-original-price-per-100g]').length > 0) {
      $('[data-original-price-per-100g]').text( pricePer100Formatted );
    }

    $('[data-mode]').attr('data-variants-quantity', totalQuantity);
    if (totalQuantity === 0 && $('[data-has-sub]').attr('data-has-sub') === 'true') {
      $('[data-mode]').attr('data-mode', '');
      if ($('.product__subscription-options input').length > 0) {
        $('.product__subscription-options input').prop('checked', false);
      }
    }
  };

  $('[data-qty-plus], [data-qty-minus]').each((i, item) => {
    $(item).on('click', calculatePricePerMeal());
  });

  saturo.calculatePricePerMeal = calculatePricePerMeal();
});
</script>

{% schema %}
{
  "name": "Personalized Variants",
  "tag": "section",
  "class": "personalized-variants__section",
  "settings": [
    {
      "type": "html",
      "id": "s2_title",
      "label": "Title - Section",
      "default": "W채hle deine Lieblingssorten und die Menge."
    },
    {
      "type": "text",
      "id": "btn_text",
      "label": "Add to cart Button Text",
      "default": "In den Warenkorb"
    }
  ]
}
{% endschema %}